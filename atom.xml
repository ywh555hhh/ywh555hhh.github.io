<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WayneBlog</title>
  
  <subtitle>never say never</subtitle>
  <link href="https://ywh555hhh.github.io/atom.xml" rel="self"/>
  
  <link href="https://ywh555hhh.github.io/"/>
  <updated>2024-06-07T00:33:44.003Z</updated>
  <id>https://ywh555hhh.github.io/</id>
  
  <author>
    <name>Wayne Yi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见基础搜索算法 以及 其在旅行商问题中的应用</title>
    <link href="https://ywh555hhh.github.io/2024/06/06/003/"/>
    <id>https://ywh555hhh.github.io/2024/06/06/003/</id>
    <published>2024-06-06T12:31:17.000Z</published>
    <updated>2024-06-07T00:33:44.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见基础搜索算法"><a href="#常见基础搜索算法" class="headerlink" title="常见基础搜索算法"></a>常见基础搜索算法</h1><p>搜索算法是在一定的搜索空间内，按照特定的策略，从一种状态移动到另一种状态的过程。<br><img src="/image/serach.excalidraw.svg" alt="serach"></p><h2 id="BFS-和-DFS"><a href="#BFS-和-DFS" class="headerlink" title="BFS 和 DFS"></a>BFS 和 DFS</h2><p>在无权图中最常用的</p><ul><li><p><strong>BFS（广度优先搜索）</strong>：从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法终止。</p></li><li><p><strong>DFS（深度优先搜索）</strong>：从根节点开始，沿着树的深度遍历树的节点，尽可能深的搜索树的分支。</p></li></ul><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>Dijkstra 算法是一种贪心算法，它总是选择当前最短的边，并更新与该边相连的顶点的最短路径。这种方法可以保证找到的是全局最短路径，但是在搜索空间很大的情况下，可能需要处理大量的顶点和边，效率较低。</p><h2 id="贪婪最佳优先搜索"><a href="#贪婪最佳优先搜索" class="headerlink" title="贪婪最佳优先搜索"></a>贪婪最佳优先搜索</h2><p>贪婪最佳优先搜索在每一步都选择估计距离目标最近的节点进行访问，这是通过一个启发式函数（也称为估价函数）来实现的。这种策略使得搜索过程更加快速，因为它优先访问看起来更接近目标的节点。但是，这种策略并不保证找到的路径是最短的，因为它可能会错过一些看起来距离目标较远但实际上是最短路径的节点。</p><h2 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h2><p>启发式搜索是一种使用启发式方法寻找最优解的搜索策略，可以解决一些经典的搜索问题，如八数码问题、旅行商问题等。</p><h3 id="A-星-算法"><a href="#A-星-算法" class="headerlink" title="A 星 算法"></a>A 星 算法</h3><p><a href="https://www.redblobgames.com/">可视化互动学习A* 算法的好资源</a><br>A* 算法是一种启发式搜索算法，它结合了 Dijkstra 算法和启发式搜索的优点。</p><p>A* 算法结合了这两种方法的优点。它使用 Dijkstra 算法的思想，保证找到的是全局最短路径，同时使用启发式函数来优先搜索代价较小的状态，提高搜索效率。在选择启发式函数时，A* 算法有一个重要的条件，就是启发式函数必须不大于实际代价，这样可以保证找到的是最优解。</p><h1 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h1><p>旅行商问题是一个经典的问题，描述的是一个旅行商要旅行n个城市，每个城市只能访问一次，最后回到原来的城市，如何规划线路使得总的旅行距离最短。</p><h2 id="NP-HARD问题"><a href="#NP-HARD问题" class="headerlink" title="NP-HARD问题"></a>NP-HARD问题</h2><p>NP-Hard问题是指那些至少和NP中最难的问题一样难的问题。旅行商问题就是一个NP-Hard问题。</p><h2 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h2><p>旅行商问题在物流、电路板制造等许多领域都有应用。</p><h1 id="搜索算法在旅行商问题中的应用"><a href="#搜索算法在旅行商问题中的应用" class="headerlink" title="搜索算法在旅行商问题中的应用"></a>搜索算法在旅行商问题中的应用</h1><p>搜索算法可以用来找到旅行商问题的最优解。例如，深度优先搜索和广度优先搜索可以用来遍历所有可能的路径，找到最短的路径。A*搜索则可以用启发式函数来优化搜索过程，提高搜索效率。</p><h2 id="能体现什么"><a href="#能体现什么" class="headerlink" title="能体现什么"></a>能体现什么</h2><p>搜索算法在旅行商问题中的应用能体现出搜索算法在解决实际问题中的重要性。同时，也能体现出不同搜索算法的优劣和适用情况。</p><h2 id="缺点是什么"><a href="#缺点是什么" class="headerlink" title="缺点是什么"></a>缺点是什么</h2><p>搜索算法在解决旅行商问题时，可能会遇到的主要问题是搜索空间太大，导致搜索效率低下。此外，对于NP-Hard问题，目前还没有多项式时间的确定性算法，所以搜索算法可能无法在合理的时间内找到最优解。</p><h1 id="搜索算法笔记"><a href="#搜索算法笔记" class="headerlink" title="搜索算法笔记"></a>搜索算法笔记</h1><h2 id="常见基础搜索算法-1"><a href="#常见基础搜索算法-1" class="headerlink" title="常见基础搜索算法"></a>常见基础搜索算法</h2><p>搜索算法是在一定的搜索空间内，按照特定的策略，从一种状态移动到另一种状态的过程。它们在计算机科学和人工智能中有广泛的应用，尤其是在路径规划和优化问题中。本文将介绍几种常见的基础搜索算法及其在经典问题中的应用。</p><h3 id="BFS-和-DFS-1"><a href="#BFS-和-DFS-1" class="headerlink" title="BFS 和 DFS"></a>BFS 和 DFS</h3><ul><li><p><strong>BFS（广度优先搜索）</strong>：从根节点开始，沿着树的宽度遍历树的节点。它逐层访问节点，先访问所有邻居节点，再访问这些邻居节点的邻居。如果所有节点均被访问，则算法终止。BFS 通常用于寻找最短路径或在图中查找某一层的所有节点。</p></li><li><p><strong>DFS（深度优先搜索）</strong>：从根节点开始，沿着树的深度遍历树的节点，尽可能深地搜索树的分支。遇到死胡同时，回溯到最近的分支点继续搜索。DFS 常用于寻找路径、连通性检测以及解决许多递归结构的问题。</p></li></ul><h3 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h3><p>Dijkstra 算法是一种用于计算加权图中单源最短路径的贪心算法。它从起始节点开始，选择当前最短的边，并更新与该边相连的顶点的最短路径。这种方法保证找到全局最短路径，但在搜索空间很大的情况下，可能需要处理大量的顶点和边，效率较低。Dijkstra 算法常用于网络路由和地理信息系统中。</p><h3 id="启发式搜索-1"><a href="#启发式搜索-1" class="headerlink" title="启发式搜索"></a>启发式搜索</h3><p>启发式搜索是一种使用启发式方法寻找最优解的搜索策略。它可以解决一些经典的搜索问题，如八数码问题、旅行商问题等。启发式函数的设计是启发式搜索算法的关键，直接影响算法的效率和效果。</p><h4 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a>A* 算法</h4><p>A* 算法是一种启发式搜索算法，结合了 Dijkstra 算法和启发式搜索的优点。它使用一个评价函数 (f(n) &#x3D; g(n) + h(n))，其中 (g(n)) 是从起点到当前节点的实际代价，(h(n)) 是从当前节点到目标节点的估计代价（启发式函数）。A* 算法在每一步选择具有最低 (f(n)) 值的节点进行扩展，保证找到的是全局最短路径，同时提高搜索效率。</p><h4 id="启发式函数的重要性"><a href="#启发式函数的重要性" class="headerlink" title="启发式函数的重要性"></a>启发式函数的重要性</h4><p>在选择启发式函数时，A* 算法有一个重要的条件，即启发式函数必须是可容忍的（不大于实际代价）。这样可以保证找到的是最优解。一个常用的启发式函数是曼哈顿距离，它在许多路径规划问题中表现良好。</p><h2 id="旅行商问题-1"><a href="#旅行商问题-1" class="headerlink" title="旅行商问题"></a>旅行商问题</h2><p>旅行商问题（TSP）是一个经典的组合优化问题，描述的是一个旅行商要旅行 n 个城市，每个城市只能访问一次，最后回到原来的城市，如何规划线路使得总的旅行距离最短。</p><h3 id="NP-Hard-问题"><a href="#NP-Hard-问题" class="headerlink" title="NP-Hard 问题"></a>NP-Hard 问题</h3><p>NP-Hard 问题是指那些至少和 NP 中最难的问题一样难的问题。旅行商问题就是一个 NP-Hard 问题，目前没有已知的多项式时间算法可以解决所有实例的 TSP。</p><h3 id="运用场景-1"><a href="#运用场景-1" class="headerlink" title="运用场景"></a>运用场景</h3><p>旅行商问题在物流优化、电子电路板制造、快递路径规划等许多领域都有广泛应用。解决该问题可以显著提高效率，降低成本。</p><h2 id="搜索算法在旅行商问题中的应用-1"><a href="#搜索算法在旅行商问题中的应用-1" class="headerlink" title="搜索算法在旅行商问题中的应用"></a>搜索算法在旅行商问题中的应用</h2><h3 id="深度优先搜索和广度优先搜索"><a href="#深度优先搜索和广度优先搜索" class="headerlink" title="深度优先搜索和广度优先搜索"></a>深度优先搜索和广度优先搜索</h3><p>深度优先搜索和广度优先搜索可以用来遍历所有可能的路径，找到最短的路径。然而，由于旅行商问题的复杂性，使用这些算法可能会遇到严重的效率问题，特别是当城市数量较多时。</p><h3 id="A-算法-1"><a href="#A-算法-1" class="headerlink" title="A* 算法"></a>A* 算法</h3><p>A* 算法可以使用启发式函数来优化搜索过程，提高搜索效率。例如，可以设计一个启发式函数来估计从当前城市到未访问城市集合的最短环路。通过这种方式，A* 算法可以有效地减少需要搜索的路径数量，从而更快地找到最优解。</p><h2 id="体现的意义"><a href="#体现的意义" class="headerlink" title="体现的意义"></a>体现的意义</h2><p>搜索算法在旅行商问题中的应用能体现出搜索算法在解决实际问题中的重要性。同时，也能体现出不同搜索算法的优劣和适用情况。例如，A* 算法在路径规划和组合优化问题中表现出色，而 BFS 和 DFS 则更适合结构简单的图和树。</p><h2 id="存在的缺点"><a href="#存在的缺点" class="headerlink" title="存在的缺点"></a>存在的缺点</h2><p>搜索算法在解决旅行商问题时，可能会遇到以下主要问题：</p><ul><li><strong>搜索空间太大</strong>：随着城市数量的增加，可能的路径数量呈指数增长，导致搜索效率低下。</li><li><strong>算法复杂度高</strong>：对于 NP-Hard 问题，目前还没有多项式时间的确定性算法，因此搜索算法可能无法在合理的时间内找到最优解。</li></ul><h2 id="贪婪最佳优先搜索与-Dijkstra-算法的比较"><a href="#贪婪最佳优先搜索与-Dijkstra-算法的比较" class="headerlink" title="贪婪最佳优先搜索与 Dijkstra 算法的比较"></a>贪婪最佳优先搜索与 Dijkstra 算法的比较</h2><h3 id="Dijkstra-算法-1"><a href="#Dijkstra-算法-1" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h3><p>Dijkstra 算法是一种保证找到最短路径的算法。它在每一步都选择当前未访问节点中距离起点最近的节点进行访问，然后更新其他节点的距离。这种策略保证了找到的路径是最短的，但是在搜索过程中可能需要访问图中的大部分节点，因此在大图中可能效率较低。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，Dijkstra 算法和贪婪最佳优先搜索在解决寻路问题时有各自的优点和缺点。Dijkstra 算法适用于需要保证最短路径的情况，而贪婪最佳优先搜索适用于需要快速找到可行路径的情况。选择哪种算法取决于问题的具体情况和需求。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;常见基础搜索算法&quot;&gt;&lt;a href=&quot;#常见基础搜索算法&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="人工智能" scheme="https://ywh555hhh.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="人工智能" scheme="https://ywh555hhh.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="学习笔记" scheme="https://ywh555hhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于本站的建设情况</title>
    <link href="https://ywh555hhh.github.io/2024/06/05/002/"/>
    <id>https://ywh555hhh.github.io/2024/06/05/002/</id>
    <published>2024-06-05T05:40:10.000Z</published>
    <updated>2024-06-06T11:45:38.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建站初心"><a href="#建站初心" class="headerlink" title="建站初心"></a>建站初心</h1><p>就是需要一个地方来记录各种事情呢</p><p>不仅是学习 也是 感悟 与 生活</p><h2 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h2><p>丰富的封面</p><p>建站时间线</p><p>rsshub</p><p>加速</p><p>about me</p><h2 id="铠甲勇士刑天"><a href="#铠甲勇士刑天" class="headerlink" title="铠甲勇士刑天"></a>铠甲勇士刑天</h2><p>A* 算法学习好资源 ：<a href="https://www.redblobgames.com/">https://www.redblobgames.com/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;建站初心&quot;&gt;&lt;a href=&quot;#建站初心&quot; class=&quot;headerlink&quot; title=&quot;建站初心&quot;&gt;&lt;/a&gt;建站初心&lt;/h1&gt;&lt;p&gt;就是需要一个地方来记录各种事情呢&lt;/p&gt;
&lt;p&gt;不仅是学习 也是 感悟 与 生活&lt;/p&gt;
&lt;h2 id=&quot;待完成&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="no categories" scheme="https://ywh555hhh.github.io/categories/no-categories/"/>
    
    
    <category term="no tag" scheme="https://ywh555hhh.github.io/tags/no-tag/"/>
    
  </entry>
  
  <entry>
    <title>My First Post</title>
    <link href="https://ywh555hhh.github.io/2024/06/04/001/"/>
    <id>https://ywh555hhh.github.io/2024/06/04/001/</id>
    <published>2024-06-04T13:25:14.000Z</published>
    <updated>2024-06-05T10:17:24.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是我建立本站的第一篇博客"><a href="#这是我建立本站的第一篇博客" class="headerlink" title="这是我建立本站的第一篇博客"></a>这是我建立本站的第一篇博客</h1><h2 id="我最近过得怎么样"><a href="#我最近过得怎么样" class="headerlink" title="我最近过得怎么样"></a>我最近过得怎么样</h2><p>我很庆幸，在我的大学生涯中，我并非盲目度日，而是有目标地生活。我找到了一些我想做的事情，并且愿意投入时间去做。我觉得这很好。我的大二生活即将结束，虽然有些<strong>可惜</strong>我直到现在才开始逐步搭建自己的博客，但是，就像那句话说的，“开始一件事最好的时间是昨天，其次是今天”。我不认为我的大一生活毫无意义，但我更倾向于认为，是在大二的时候，我在计算机世界中找到了更加有意义的事。</p><p>最近，我通过抖音上的“速看电影系列”浏览了一些有哲理的有深度的电影。我知道通过剪辑版可能无法完全领略电影的深意，但我仍然有被触动。有些电影是关于亲情的，有些是关于友情的，有些是关于哲理的。总的来说，我有很多感触，只是遗憾我的文字表达能力有限，可能无法完全表达出来。</p><p>我想说“共勉”二字给大家。最近，我也认识了很多新朋友！</p><p>值得一提的是我现在的主页封面就是我最近认识了一位<a href="https://space.bilibili.com/21659390?spm_id_from=333.337.0.0">朋友</a>的作品。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">Wayne</span> <span class="string">Yi</span></span><br><span class="line"><span class="attr">nickname:</span> <span class="string">teapot1de</span></span><br><span class="line"><span class="attr">chineseName:</span> <span class="string">易炜涵</span></span><br></pre></td></tr></table></figure><h2 id="我的规划"><a href="#我的规划" class="headerlink" title="我的规划"></a>我的规划</h2><p>OSPP </p><p>超算</p><p>可能就是我未来最近要忙的吧</p><p>同时还有烦人的期末</p><p>这个是真烦人呢</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;这是我建立本站的第一篇博客&quot;&gt;&lt;a href=&quot;#这是我建立本站的第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;这是我建立本站的第一篇博客&quot;&gt;&lt;/a&gt;这是我建立本站的第一篇博客&lt;/h1&gt;&lt;h2 id=&quot;我最近过得怎么样&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="no categories" scheme="https://ywh555hhh.github.io/categories/no-categories/"/>
    
    
    <category term="no tag" scheme="https://ywh555hhh.github.io/tags/no-tag/"/>
    
  </entry>
  
  <entry>
    <title>Hello blog World</title>
    <link href="https://ywh555hhh.github.io/2024/06/04/hello-world/"/>
    <id>https://ywh555hhh.github.io/2024/06/04/hello-world/</id>
    <published>2024-06-04T01:57:09.546Z</published>
    <updated>2024-06-05T05:56:15.415Z</updated>
    
    <content type="html"><![CDATA[<p>hello!</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;hello!&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="Hello World" scheme="https://ywh555hhh.github.io/categories/Hello-World/"/>
    
    
    <category term="Hello World" scheme="https://ywh555hhh.github.io/tags/Hello-World/"/>
    
  </entry>
  
</feed>
